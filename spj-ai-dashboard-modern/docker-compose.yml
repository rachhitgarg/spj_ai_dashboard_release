version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: spj-dashboard-db
    environment:
      POSTGRES_DB: spj_ai_dashboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-spj_ai_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spj-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: spj-dashboard-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: spj_ai_dashboard
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-spj_ai_password}
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_here}
      JWT_EXPIRES_IN: 7d
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/templates:/app/templates
    networks:
      - spj-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: spj-dashboard-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - spj-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: spj-dashboard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - spj-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  spj-network:
    driver: bridge
